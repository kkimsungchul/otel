[ 공식문서 따라하기 ]

# java 예제
	https://opentelemetry.io/docs/languages/java/getting-started/
	https://opentelemetry.io/docs/languages/java/instrumentation/

# java
	https://github.com/open-telemetry/opentelemetry-java

# JAVA 서버에 agent 추가 방법
	https://opentelemetry.io/docs/languages/java/automatic/server-config/

# sdk
	
	https://opentelemetry.io/docs/languages/java/
	java의 경우 1.8이 미니멈임
=====================================================================
# 참고사항
	요구사항 버전이 상당히 높음
	권장사양
	https://github.com/open-telemetry/opentelemetry-java/blob/main/VERSIONING.md#language-version-compatibility
	https://opentelemetry.io/docs/demo/development/

	
# 프로젝트 생성 및 빌드
	- 스프링부트 프로젝트로 생성했으며, 별도의 라이브러리 임포트 없음,다만 로깅내용만 간단히 남김
	- jar 로 빌드하여 실행 파일 생성
	- 컨트롤러 하나를 생성해 두고, 사용자가 접속할수 있도록 설정
	ex) http://localhost:8080/rolldice

# agent jar 다운로드
	java 에이전트임
	https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar

# agent 다운로드 후 cmd창에서 아래와 같이 설정
	설정 관련 정보 링크 : 
		https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md#logging-exporter
	엔드포인트(콜렉터) 설정 방법 예시 : 
		https://opentelemetry.io/docs/collector/deployment/agent/
	

	- 데스크탑 (김성철)
	=====================================================================
	set JAVA_TOOL_OPTIONS=-javaagent:C:\Users\sung\Desktop\개발\otel\OTel-git\otel-java-agent\opentelemetry-javaagent.jar
	set OTEL_METRIC_EXPORT_INTERVAL=1000
	set OTEL_TRACES_EXPORTER=otlp
	set OTEL_METRICS_EXPORTER=otlp
	set OTEL_LOGS_EXPORTER=otlp
	set OTEL_EXPORTER_OTLP_ENDPOINT=http://127.0.0.1:4317
	set OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://127.0.0.1:4317
	set OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://127.0.0.1:4317
	set OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://127.0.0.1:4317
	set OTEL_EXPORTER_OTLP_PROTOCOL=grpc
	=====================================================================
	
	-노트북 (김성철)
	==========================================================================
	set JAVA_TOOL_OPTIONS=-javaagent:C:\IntelliJ_Project\otel-util\opentelemetry-javaagent.jar
	set OTEL_METRIC_EXPORT_INTERVAL=15000
	set OTEL_TRACES_EXPORTER=otlp
	set OTEL_METRICS_EXPORTER=otlp
	set OTEL_LOGS_EXPORTER=otlp
	set OTEL_EXPORTER_OTLP_ENDPOINT=http://127.0.0.1:4317
	set OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://127.0.0.1:4317
	set OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://127.0.0.1:4317
	set OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://127.0.0.1:4317
	set OTEL_EXPORTER_OTLP_PROTOCOL=grpc

	==========================================================================

	- 콘솔에만 출력
	=====================================================================
	set JAVA_TOOL_OPTIONS=-javaagent:C:\Users\sung\Desktop\개발\otel\OTel-git\otel-java-agent\opentelemetry-javaagent.jar
	set OTEL_TRACES_EXPORTER=logging
	set OTEL_METRICS_EXPORTER=logging
	set OTEL_LOGS_EXPORTER=logging
	set OTEL_METRIC_EXPORT_INTERVAL=1000
	=====================================================================

	- 프로메테우스로 바로 전송
		set OTEL_METRICS_EXPORTER=prometheus
		set OTEL_EXPORTER_OTLP_ENDPOINT=http://127.0.0.1:4317 <- 라인제거
	※ 기본값
	set OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
	※ 여기서 삽질 오지게함.
		http/protobuf 로 설정하고 보내면 콜렉터에서 받질못햇음.
		뭐 아무리 설정을 뒤져봐도 안됐음.
		프로토콜을 grpc로 바꾸고 콜렉터 설정에도 grpc를 넣어주면 작동함

# 위 설정 완료 후 프로젝트 파일 실행
	java -jar otel-test-springboot.jar
	=====================================================================
	[otel.javaagent 2024-05-09 00:18:05:280 +0900] [PeriodicMetricReader-1] INFO io.opentelemetry.exporter.logging.LoggingMetricExporter - metric: ImmutableMetricData{resource=Resource{schemaUrl=https://opentelemetry.io/schemas/1.24.0, attributes={host.arch="amd64", host.name="sung-PC", os.description="Windows 10 10.0", os.type="windows", process.command_line="C:\Program Files\Java\jdk-17.0.2\bin\java.exe -javaagent:C:\Users\sung\Desktop\개발\otel\opentelemetry-javaagent.jar -jar otel-0.0.1-SNAPSHOT.jar", process.executable.path="C:\Program Files\Java\jdk-17.0.2\bin\java.exe", process.pid=13864, process.runtime.description="Oracle Corporation OpenJDK 64-Bit Server VM 17.0.2+8-86", process.runtime.name="OpenJDK Runtime Environment", process.runtime.version="17.0.2+8-86", service.instance.id="33a15e56-8598-44bd-b586-6daf91fcfcca", service.name="otel-test", service.version="0.0.1-SNAPSHOT", telemetry.sdk.language="java", telemetry.sdk.name="opentelemetry", telemetry.sdk.version="1.37.0"}}, instrumentationScopeInfo=InstrumentationScopeInfo{name=io.opentelemetry.tomcat-10.0, version=2.3.0-alpha, schemaUrl=null, attributes={}}, name=http.server.request.duration, description=Duration of HTTP server requests., unit=s, type=HISTOGRAM, data=ImmutableHistogramData{aggregationTemporality=CUMULATIVE, points=[ImmutableHistogramPointData{getStartEpochNanos=1715181305211707500, getEpochNanos=1715181485223774900, getAttributes={http.request.method="GET", http.response.status_code=200, http.route="/rolldice", network.protocol.version="1.1", url.scheme="http"}, getSum=0.20853419999999998, getCount=2, hasMin=true, getMin=0.0043199, hasMax=true, getMax=0.2042143, getBoundaries=[0.005, 0.01, 0.025, 0.05, 0.075, 0.1, 0.25, 0.5, 0.75, 1.0, 2.5, 5.0, 7.5, 10.0], getCounts=[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], getExemplars=[]}]}}
	[otel.javaagent 2024-05-09 00:21:35:279 +0900] [PeriodicMetricReader-1] INFO io.opentelemetry.exporter.logging.LoggingMetricExporter - metric: ImmutableMetricData{resource=Resource{schemaUrl=https://opentelemetry.io/schemas/1.24.0, attributes={host.arch="amd64", host.name="sung-PC", os.description="Windows 10 10.0", os.type="windows", process.command_line="C:\Program Files\Java\jdk-17.0.2\bin\java.exe -javaagent:C:\Users\sung\Desktop\개발\otel\opentelemetry-javaagent.jar -jar otel-0.0.1-SNAPSHOT.jar", process.executable.path="C:\Program Files\Java\jdk-17.0.2\bin\java.exe", process.pid=13864, process.runtime.description="Oracle Corporation OpenJDK 64-Bit Server VM 17.0.2+8-86", process.runtime.name="OpenJDK Runtime Environment", process.runtime.version="17.0.2+8-86", service.instance.id="33a15e56-8598-44bd-b586-6daf91fcfcca", service.name="otel-test", service.version="0.0.1-SNAPSHOT", telemetry.sdk.language="java", telemetry.sdk.name="opentelemetry", telemetry.sdk.version="1.37.0"}}, instrumentationScopeInfo=InstrumentationScopeInfo{name=io.opentelemetry.tomcat-10.0, version=2.3.0-alpha, schemaUrl=null, attributes={}}, name=http.server.request.duration, description=Duration of HTTP server requests., unit=s, type=HISTOGRAM, data=ImmutableHistogramData{aggregationTemporality=CUMULATIVE, points=[ImmutableHistogramPointData{getStartEpochNanos=1715181305211707500, getEpochNanos=1715181695225332200, getAttributes={http.request.method="GET", http.response.status_code=200, http.route="/rolldice", network.protocol.version="1.1", url.scheme="http"}, getSum=0.20853419999999998, getCount=2, hasMin=true, getMin=0.0043199, hasMax=true, getMax=0.2042143, getBoundaries=[0.005, 0.01, 0.025, 0.05, 0.075, 0.1, 0.25, 0.5, 0.75, 1.0, 2.5, 5.0, 7.5, 10.0], getCounts=[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], getExemplars=[]}]}}
	=====================================================================


# 콜렉터 실행
	[Otel]otel-collector-설치-및-사용.txt 파일 참고
