- 모니터링
- 옵저버빌리티


- 오픈텔레메트리 소개
    오픈텔레메트리란 추적,매트릭,로그와 같은 원격 측정 데이터를 생성하고 관리하도록 설계된 관찰 프레임워크
    언어, 인프라, 환경에 관계 없이 어플리케이션이나 시스템을 쉽게 계측 할수 있도록 해줌
    계측에 필요한 데이터를 생성, 수집, 관리, 내보내기에 중점을 두고 있으며 저장 및 시각화는 제공해주지 않음

    트레이싱(Tracing): 요청의 흐름을 추적하여 애플리케이션의 성능과 장애 지점을 파악.
    -> 각 서비스 간의 호출 관계를 파악하고, 지연 시간과 에러 발생 지점을 확인.

    메트릭스(Metrics): 시스템 성능에 대한 수치 데이터를 수집 및 분석.
    -> CPU 사용량, 메모리 사용량, 요청 처리 시간 등의 지표를 수집하고 분석.

    로그(Logging): 애플리케이션의 동작 상태를 기록하여 문제 진단과 해결.

    ※ 소개
    https://opentelemetry.io/docs/what-is-opentelemetry/
    https://uptrace.dev/opentelemetry/architecture.html

    ※ trace는 w3c 표준을 따르고 있음
    https://opentelemetry.io/docs/specs/otel/trace/api/#spancontext
    https://www.w3.org/TR/trace-context/

- 목적
    W3C 표준

- 옵저버빌리티에 대해
    시스템의 내부 상태를 외부에서 관찰 및 측정하는 것을 말함
    기존 모니터링이 무엇이 언제 일어났는가에 초점을 두고 있다면, 옵저버빌리티는 왜 어떻게 일어났는가 까지 파악할수 있도록 하는데 초점을 두고 있음

    옵저버빌리티는 완전히 새로운 개념은 아닙니다.
    엔지니어링 및 제어 이론에서 기인한 이 개념은 헝가리 출신의 미국 엔지니어 루돌프 E. 칼만(Rudolf E. Kálmán)이 선형 동적 시스템에서 처음 도입했습니다.
    엔지니어링 및 제어 이론에 적용된 옵저버빌리티의 일반적인 정의는 ‘외부 데이터로부터 시스템 내부 상태를 얼마나 잘 유추할 수 있는지에 대한 척도’ 입니다.

    옵저버빌리티는 소프트웨어의 수명주기 전반에서 시스템 운영에 대한 포괄적인 이해를 돕기 위해 메트릭, 이벤트, 로그 및 트레이스를 수집, 시각화 및 분석하는 것을 아우릅니다.
    무엇이 잘못되었는지를 보여주는 모니터링과 비교해, 옵저버빌리티는  무엇이 '왜' 잘못되었는지를 보여줍니다.
    ※ 참고
    https://www.igloo.co.kr/security-information/%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%9D%B8%ED%94%84%EB%9D%BC-%EC%A0%84%ED%99%98-%EC%8B%9C%EB%8C%80%EC%97%90-%EC%82%B4%EC%95%84%EB%82%A8%EA%B8%B0-%EC%98%B5%EC%A0%80%EB%B2%84%EB%B9%8C%EB%A6%AC/
    https://newrelic.com/kr/resources/ebooks/the-age-of-observability#toc-2-


- 장단점
- 지원해주는 언어 및 플랫폼
https://opentelemetry.io/docs/languages/
https://opentelemetry.io/ecosystem/registry/
# API , SDK
    SDK Config
    C++
    .NET
    Erlang/Elixir
    Go
    Java
    JavaScript
    PHP
    Python
    Ruby
    Rust
    Swift
# zero-code
    Go
    .NET
    PHP
    Python
    Java
    JavaScript

- 연동 가능한 시각화 툴



- 사용방법
    -- SDK와 Agent, zero code방식 소개
		SDK : JAVA , Python
		Agent or auto : JAVA , Python
		zeor code : JAVA

    -- SDK , Agent , Auto 장/단점 ※강조
        오토, 에이전트 방식으로 하였을 때 장/단점
        SDK 방식으로 하였을 때 장/단점

    -- 테스트 어플리케이션에서 사용한 공통모듈 부분 소개
        --- AOP.java
			---- 코드 설명 -> 왜 이렇게 구현하였는지
	        --- JAVA(SDK) 실행

		--- wsgi.py
			---- 코드 설명 -> 왜 이렇게 구현하였는지
			--- Python(SDK) 실행

- 데모 시연


    -- 테스트 어플리케이션
        ※ 게시판 기능
        --- JAVA(내부 Agent)
        --- JAVA(외부 Agent)
        --- Python(Agent)

	-- 시각화 툴에서 데이터 확인
		--- 프로메테우스, 예거, 그라파나
		--- JAVA 수집 , 파이썬 수집
		--- SDK와 Agent 방식의 데이터 비교


- 예외 / 오류 발생 확인
    -- 의도하지 않은 오류
    -- 예외처리한 오류
    -- span , metric

- 부하 테스트 (스트레스 테스트)
    -- 부하 테스트 진행이유
		--- span(trace) 추적 데이터를 통해서 문제가 발생하는 부분을 확인 하는것을 보여줌
		--- CPU , Memory 사용량 (파이썬)
		--- 모니터링하는 이유
    -- 부하테스트 결과 확인 (메트릭 , 트레이서)
        사용자수 / 요청수 / 요청 데이터 수-게시글 건수
        1. 사용자가 증가할때
        2. 응닶 데이터의 크기가 커질때

        --- alert 발생 방법
            ---- CPU / Memory 일정 수준 이상 증가 시 gmail 발송
            ---- 텔레그램,슬랙 가능하다는 내용 소개

- 산출물
    -- KMS 링크
    -- 소스코드 링크

- 서비스 사용 방안
    -- 자체 모니터링 시스템 구축
        --- 이렇게 구축하면 뭐가 좋은지?
	-- 목적