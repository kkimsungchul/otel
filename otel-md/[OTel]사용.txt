[ 공식문서 따라하기 ]

# 라이브러리
https://javadoc.io/doc/io.opentelemetry

# java 예제
	https://opentelemetry.io/docs/languages/java/getting-started/
	https://opentelemetry.io/docs/languages/java/instrumentation/

# collector 다운로드
	https://github.com/open-telemetry/opentelemetry-collector/releases
	https://github.com/open-telemetry/opentelemetry-collector-releases/releases/tag/v0.100.0
	윈도우용 다운로드
	https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.100.0/otelcol_0.100.0_windows_386.tar.gz

# java
	https://github.com/open-telemetry/opentelemetry-java

# sdk
	https://opentelemetry.io/docs/languages/java/
	java의 경우 1.8이 미니멈임
=====================================================================

# 기본 구성

## JAVA Agent 사용
어플리케이션 -> otel-agent -> otel-collector



# 참고사항
	요구사항 버전이 상당히 높음
	권장사양
	https://opentelemetry.io/docs/demo/development/

	
# 프로젝트 생성 및 빌드
	- 스프링부트 프로젝트로 생성했으며, 별도의 라이브러리 임포트 없음,다만 로깅내용만 간단히 남김
	- jar 로 빌드하여 실행 파일 생성
	- 컨트롤러 하나를 생성해 두고, 사용자가 접속할수 있도록 설정
	ex) http://localhost:8080/rolldice

# agent jar 다운로드
	java 에이전트임
	https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar

# agent 다운로드 후 cmd창에서 아래와 같이 설정
	설정 관련 정보 링크 : 
		https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md#logging-exporter
	엔드포인트(콜렉터) 설정 방법 예시 : 
		https://opentelemetry.io/docs/collector/deployment/agent/
	
	- 데스크탑
	=====================================================================
	set JAVA_TOOL_OPTIONS=-javaagent:C:\Users\sung\Desktop\개발\otel\opentelemetry-javaagent.jar
	set OTEL_TRACES_EXPORTER=logging
	set OTEL_METRICS_EXPORTER=logging
	set OTEL_LOGS_EXPORTER=logging
	set OTEL_METRIC_EXPORT_INTERVAL=1000
	set OTEL_TRACES_EXPORTER=otlp
	set OTEL_METRICS_EXPORTER=otlp
	set OTEL_LOGS_EXPORTER=otlp
	set OTEL_EXPORTER_OTLP_ENDPOINT=http://127.0.0.1:4317
	set OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://127.0.0.1:4317
	set OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://127.0.0.1:4317
	set OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://127.0.0.1:4317
	set OTEL_EXPORTER_OTLP_PROTOCOL=grpc
	=====================================================================
	
	-노트북
	==========================================================================
	set JAVA_TOOL_OPTIONS=-javaagent:C:\IntelliJ_Project\otel-util\opentelemetry-javaagent.jar
	set OTEL_TRACES_EXPORTER=logging
	set OTEL_METRICS_EXPORTER=logging
	set OTEL_LOGS_EXPORTER=logging
	set OTEL_METRIC_EXPORT_INTERVAL=15000
	set OTEL_TRACES_EXPORTER=otlp
	set OTEL_METRICS_EXPORTER=otlp
	set OTEL_LOGS_EXPORTER=otlp
	set OTEL_EXPORTER_OTLP_ENDPOINT=http://127.0.0.1:4317
	set OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://127.0.0.1:4317
	set OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://127.0.0.1:4317
	set OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://127.0.0.1:4317
	set OTEL_EXPORTER_OTLP_PROTOCOL=grpc

	==========================================================================

	※ 기본값
	set OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
	※ 여기서 삽질 오지게함.
		http/protobuf 로 설정하고 보내면 콜렉터에서 받질못햇음.
		뭐 아무리 설정을 뒤져봐도 안됐음.
		프로토콜을 grpc로 바꾸고 콜렉터 설정에도 grpc를 넣어주면 작동함

# 위 설정 완료 후 프로젝트 파일 실행
	java -jar xxxxx.jar
	=====================================================================
	[otel.javaagent 2024-05-09 00:18:05:280 +0900] [PeriodicMetricReader-1] INFO io.opentelemetry.exporter.logging.LoggingMetricExporter - metric: ImmutableMetricData{resource=Resource{schemaUrl=https://opentelemetry.io/schemas/1.24.0, attributes={host.arch="amd64", host.name="sung-PC", os.description="Windows 10 10.0", os.type="windows", process.command_line="C:\Program Files\Java\jdk-17.0.2\bin\java.exe -javaagent:C:\Users\sung\Desktop\개발\otel\opentelemetry-javaagent.jar -jar otel-0.0.1-SNAPSHOT.jar", process.executable.path="C:\Program Files\Java\jdk-17.0.2\bin\java.exe", process.pid=13864, process.runtime.description="Oracle Corporation OpenJDK 64-Bit Server VM 17.0.2+8-86", process.runtime.name="OpenJDK Runtime Environment", process.runtime.version="17.0.2+8-86", service.instance.id="33a15e56-8598-44bd-b586-6daf91fcfcca", service.name="otel-test", service.version="0.0.1-SNAPSHOT", telemetry.sdk.language="java", telemetry.sdk.name="opentelemetry", telemetry.sdk.version="1.37.0"}}, instrumentationScopeInfo=InstrumentationScopeInfo{name=io.opentelemetry.tomcat-10.0, version=2.3.0-alpha, schemaUrl=null, attributes={}}, name=http.server.request.duration, description=Duration of HTTP server requests., unit=s, type=HISTOGRAM, data=ImmutableHistogramData{aggregationTemporality=CUMULATIVE, points=[ImmutableHistogramPointData{getStartEpochNanos=1715181305211707500, getEpochNanos=1715181485223774900, getAttributes={http.request.method="GET", http.response.status_code=200, http.route="/rolldice", network.protocol.version="1.1", url.scheme="http"}, getSum=0.20853419999999998, getCount=2, hasMin=true, getMin=0.0043199, hasMax=true, getMax=0.2042143, getBoundaries=[0.005, 0.01, 0.025, 0.05, 0.075, 0.1, 0.25, 0.5, 0.75, 1.0, 2.5, 5.0, 7.5, 10.0], getCounts=[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], getExemplars=[]}]}}
	[otel.javaagent 2024-05-09 00:21:35:279 +0900] [PeriodicMetricReader-1] INFO io.opentelemetry.exporter.logging.LoggingMetricExporter - metric: ImmutableMetricData{resource=Resource{schemaUrl=https://opentelemetry.io/schemas/1.24.0, attributes={host.arch="amd64", host.name="sung-PC", os.description="Windows 10 10.0", os.type="windows", process.command_line="C:\Program Files\Java\jdk-17.0.2\bin\java.exe -javaagent:C:\Users\sung\Desktop\개발\otel\opentelemetry-javaagent.jar -jar otel-0.0.1-SNAPSHOT.jar", process.executable.path="C:\Program Files\Java\jdk-17.0.2\bin\java.exe", process.pid=13864, process.runtime.description="Oracle Corporation OpenJDK 64-Bit Server VM 17.0.2+8-86", process.runtime.name="OpenJDK Runtime Environment", process.runtime.version="17.0.2+8-86", service.instance.id="33a15e56-8598-44bd-b586-6daf91fcfcca", service.name="otel-test", service.version="0.0.1-SNAPSHOT", telemetry.sdk.language="java", telemetry.sdk.name="opentelemetry", telemetry.sdk.version="1.37.0"}}, instrumentationScopeInfo=InstrumentationScopeInfo{name=io.opentelemetry.tomcat-10.0, version=2.3.0-alpha, schemaUrl=null, attributes={}}, name=http.server.request.duration, description=Duration of HTTP server requests., unit=s, type=HISTOGRAM, data=ImmutableHistogramData{aggregationTemporality=CUMULATIVE, points=[ImmutableHistogramPointData{getStartEpochNanos=1715181305211707500, getEpochNanos=1715181695225332200, getAttributes={http.request.method="GET", http.response.status_code=200, http.route="/rolldice", network.protocol.version="1.1", url.scheme="http"}, getSum=0.20853419999999998, getCount=2, hasMin=true, getMin=0.0043199, hasMax=true, getMax=0.2042143, getBoundaries=[0.005, 0.01, 0.025, 0.05, 0.075, 0.1, 0.25, 0.5, 0.75, 1.0, 2.5, 5.0, 7.5, 10.0], getCounts=[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], getExemplars=[]}]}}
	=====================================================================

# collector 설치
	https://opentelemetry.io/docs/collector/installation/

# 설정
	https://opentelemetry.io/docs/collector/configuration/

# customconfig.yaml 파일 생성
	https://opentelemetry.io/docs/collector/configuration/
	=====================================================================
	receivers:
	  otlp: # the OTLP receiver the app is sending logs to
		protocols:
		  grpc:
			endpoint: 127.0.0.1:4317
		  http:
			endpoint: 127.0.0.1:4318

	processors:
	  batch:

	exporters:
	  logging :
		verbosity: detailed 
	  file: # the File Exporter, to ingest logs to local file
		path: example.log
		rotation:

	service:
	  pipelines:
		logs/dev:
		  receivers: [otlp]
		  processors: [batch]
		  exporters: [file]

	=====================================================================

# customconfig.yaml 파일 검증
	otelcol validate --config=customconfig.yaml

# collector 실행
	otelcol --config=customconfig.yaml


==========================================================================

[ 파이썬 ]


## python SKD 사용
어플리케이션(otel-sdk) -> otel-collector



#  플라스크 실행

==========================================================================
set OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED=true
opentelemetry-instrument `
--metric_export_interval=15000 `
--traces_exporter=otlp `
--metrics_exporter=otlp `
--logs_exporter=otlp `
--exporter_otlp_endpoint=http://127.0.0.1:4317 `
--exporter_otlp_traces_endpoint=http://127.0.0.1:4317 `
--exporter_otlp_metrics_endpoint=http://127.0.0.1:4317 `
--exporter_otlp_logs_endpoint=http://127.0.0.1:4317 `
--exporter_otlp_protocol=grpc `
flask run -p 9090
==========================================================================


[ 오류 ]
ERROR:opentelemetry.exporter.otlp.proto.grpc.exporter:Failed to export metrics to 127.0.0.1:4317, error code: StatusCode.UNIMPLEMENTED
-> 콜렉터의 metrics 설정이 안되어 있어서 발생함 아래와 같이 설정하면 됨
service:
  pipelines:
    logs/dev:
      receivers: [otlp]
      processors: [batch]
      exporters: [file]
    traces:
      receivers: [otlp]
      exporters: [file]
      processors: [batch]
    metrics:
      receivers: [otlp]
      exporters: [file]
      processors: [batch]






[ 참고 링크 ]
Kubernetes 환경에서 OpenTelemetry Collector 구성하기
https://medium.com/@dudwls96/kubernetes-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-opentelemetry-collector-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0-d20e474a8b18


OpenTelemetry, Grafana, Loki, Tempo, Prometheus를 활용한 Spring Boot Observability 구성하기
https://medium.com/@dudwls96/opentelemetry-grafana-loki-tempo-prometheus%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-spring-boot-observability-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0-f977df45bb70

Tempo & Opentelemetry 도입하기
https://velog.io/@akeka0303/Tempo-Opentelemetry-%EB%8F%84%EC%9E%85%ED%95%98%EA%B8%B0



https://jerryljh.tistory.com/113


https://dongwook35.tistory.com/87