[공식문서 따라하기]
1. python
https://opentelemetry.io/docs/languages/python/getting-started/


# 맥에서 가상 환경 설치 및 필요한 라이브러리 설치
Pycharm > Settings > Python Interpreter > python v3.11

# 플라스크 설치
pip install flask

# 플라스크 실행
flask run -p 8080

# opentelemetry-distro  설치 (interpreter settings에서)
pip install opentelemetry-distro
opentelemetry-bootstrap -a install

# opentelemetry-exporter-otlp 설치
pip install opentelemetry-exporter-otlp

# 트레이스, 메트릭, 로그 확인
export OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED=true
opentelemetry-instrument \
    --traces_exporter console \
    --metrics_exporter console \
    --logs_exporter console \
    --service_name dice-server \
    python3 flask run -p 8080

# tmp 폴더에 yaml 파일 생성
# /tmp/otel-collector-config.yaml
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 127.0.0.1:4317
      http:
        endpoint: 127.0.0.1:4318

exporters:
  logging :
    verbosity: detailed
  file: # the File Exporter, to ingest logs to local file
    path: example.log
    rotation:

processors:
  batch:

service:
  pipelines:
    logs/dev:
      receivers: [otlp]
      processors: [batch]
      exporters: [file]

# collector 설치
curl --proto '=https' --tlsv1.2 -fOL https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.100.0/otelcol_0.100.0_darwin_arm64.tar.gz
tar -xvf otelcol_0.100.0_darwin_arm64.tar.gz

# collector 권한부여
chmod +x /Users/jihyoun/Otel/otelcol

# collector 실행
/Users/jihyoun/Otel/otelcol --config=/Users/jihyoun/2024/otel/otel-test-python/tmp/otel-collector-config.yaml

# 플라스크 실행
export OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED=true
opentelemetry-instrument \
--metric_export_interval=15000 \
--traces_exporter=otlp \
--metrics_exporter=otlp \
--logs_exporter=otlp \
--exporter_otlp_endpoint=http://127.0.0.1:4317 \
--exporter_otlp_traces_endpoint=http://127.0.0.1:4317 \
--exporter_otlp_metrics_endpoint=http://127.0.0.1:4317 \
--exporter_otlp_logs_endpoint=http://127.0.0.1:4317 \
--exporter_otlp_protocol=grpc \
python3 -m flask run -p 8080

root 경로(jihyoun)에 log파일 생성됨
git에서는 python3 -m flask run -p 8080으로 해야 실행됨
(기존에는 flask run -p 8080)


# prometheus 설치
brew install prometheus

# yml 파일 경로
/opt/homebrew/etc/prometheus.yml

# prometheus yml 파일 수정
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: "prometheus"
    static_configs:
    - targets: ["localhost:9090"]

  - job_name: dice-service
    scrape_interval: 5s
    static_configs:
      - targets: ["localhost:9464"]  # 로컬에서 실행 중인 서비스의 포트

# yaml 파일 수정
# /tmp/otel-collector-config.yaml
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 127.0.0.1:4317
      http:
        endpoint: 127.0.0.1:4318


exporters:
  logging :
    verbosity: detailed
  file: # the File Exporter, to ingest logs to local file
    path: example.log
    rotation:
  prometheus:
    endpoint: 127.0.0.1:9464

processors:
  batch:

service:
  pipelines:
    logs/dev:
      receivers: [otlp]
      processors: [batch]
      exporters: [file]
    traces:
      receivers: [otlp]
      exporters: [file]
      processors: [batch]
    metrics:
      receivers: [otlp]
      exporters: [prometheus]
      processors: [batch]

# export 시 필요한 라이브러리 설치
pip3 install opentelemetry-exporter-otlp-proto-grpc
pip3 install flask opentelemetry-api opentelemetry-sdk opentelemetry-instrumentation-flask opentelemetry-exporter-otlp
pip3 install opentelemetry-exporter-prometheus


# 플라스크 실행
export OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED=true
opentelemetry-instrument \
--service_name=python-roll-dice-service \
--metric_export_interval=1000 \
--traces_exporter=otlp \
--metrics_exporter=otlp \
--logs_exporter=otlp \
--exporter_otlp_endpoint=http://127.0.0.1:4317 \
--exporter_otlp_traces_endpoint=http://127.0.0.1:4317 \
--exporter_otlp_logs_endpoint=http://127.0.0.1:4317 \
--exporter_otlp_protocol=grpc \
python3 -m flask run -p 8080

